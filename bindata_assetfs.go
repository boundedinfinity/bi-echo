// Code generated by go-bindata.
// sources:
// view/index.html
// view/test.html
// static/.gitignore
// static/app.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe2\xb2\x81\xd0\x36\x19\xa9\x89\x29\x76\x5c\x0a\x40\x60\x53\x92\x59\x92\x93\x6a\xe7\x9a\x9c\x91\xaf\x10\x9c\x5a\x54\x96\x5a\x64\xa3\x0f\x11\xe2\xb2\xd1\x87\x28\xe3\xb2\x49\xca\x4f\xa9\x04\x2a\x0f\xc9\xc8\x2c\x56\x00\xa2\xc4\x3c\x85\x54\x90\xfa\x62\xb0\x7a\xa0\x3a\x88\x3c\x50\x3d\xd8\x74\x40\x00\x00\x00\xff\xff\xe4\x61\x2a\x1d\x76\x00\x00\x00")

func viewIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewIndexHtml,
		"view/index.html",
	)
}

func viewIndexHtml() (*asset, error) {
	bytes, err := viewIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/index.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1464762716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewTestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe2\xb2\x81\xd0\x36\x19\xa9\x89\x29\x76\x5c\x0a\x40\x60\x53\x92\x59\x92\x93\x6a\xe7\x9a\x9c\x91\xaf\x10\x9c\x5a\x54\x96\x5a\x64\xa3\x0f\x11\xe2\xb2\xd1\x87\x28\xe3\xb2\x49\xca\x4f\xa9\x04\x2a\x0f\xc9\xc8\x2c\x56\x00\xa2\x44\x85\x92\xd4\xe2\x12\x85\x82\xc4\xf4\x54\xa0\x22\x88\x24\x50\x31\xd8\x68\x40\x00\x00\x00\xff\xff\xd4\x38\xaf\x38\x73\x00\x00\x00")

func viewTestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewTestHtml,
		"view/test.html",
	)
}

func viewTestHtml() (*asset, error) {
	bytes, err := viewTestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/test.html", size: 115, mode: os.FileMode(420), modTime: time.Unix(1464846289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xca\x2f\x4f\x2d\x8a\x4f\xce\xcf\x2d\xc8\xcf\x4b\xcd\x2b\x29\xd6\xe7\x02\x04\x00\x00\xff\xff\x25\x5f\xbe\xe2\x12\x00\x00\x00")

func staticGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_staticGitignore,
		"static/.gitignore",
	)
}

func staticGitignore() (*asset, error) {
	bytes, err := staticGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/.gitignore", size: 18, mode: os.FileMode(420), modTime: time.Unix(1464847891, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4b\x2c\x52\xa8\x50\xb0\x55\x30\xb4\xe6\x02\x04\x00\x00\xff\xff\xe5\x0e\x70\xbc\x0b\x00\x00\x00")

func staticAppJsBytes() ([]byte, error) {
	return bindataRead(
		_staticAppJs,
		"static/app.js",
	)
}

func staticAppJs() (*asset, error) {
	bytes, err := staticAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/app.js", size: 11, mode: os.FileMode(420), modTime: time.Unix(1464847960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/index.html": viewIndexHtml,
	"view/test.html": viewTestHtml,
	"static/.gitignore": staticGitignore,
	"static/app.js": staticAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{staticGitignore, map[string]*bintree{}},
		"app.js": &bintree{staticAppJs, map[string]*bintree{}},
	}},
	"view": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewIndexHtml, map[string]*bintree{}},
		"test.html": &bintree{viewTestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
